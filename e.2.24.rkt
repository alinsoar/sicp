#lang racket/base

;;;                                               ; artist-mode
;;;   +------+------+    +------+------+          ; (list 1 (list 2 (list 3 4)))
;;;   |  o   |   o--+--->+  o   |   /  |
;;;   +--|---+------+    +--|---+------+
;;;      |                  |
;;;      v                  v
;;;    +-+-+             +--+---+------+    +------+------+
;;;    | 1 |             |  o   |   o--+--->+  o   |   /  |
;;;    +---+             +--|---+------+    +--|---+------+
;;;                         |                  |
;;;                         v                  v
;;;                       +-+-+             +--+---+------+    +------+------+
;;;                       | 2 |             |  o   |   o--+--->+  o   |   /  |
;;;                       +---+             +--|---+------+    +--|---+------+
;;;                                            |                  |
;;;                                            v                  v
;;;                                          +-+-+              +-+-+
;;;                                          | 3 |              | 4 |
;;;                                          +---+              +---+

;;; Draw the tree like the box model in the book.
;;; 'X means nil pointer and 'ASTERISK means non-nil pointer.
;;; 'DIEZ means terminal, and it's followed by its value.
;;; At each node, CAR is to right, CDR is down

(define (indent n)
  (cond ((null? n))
        (; node that has no child
         (eq? (car n) 'car-not-pair)
         (display "|"))
        (;node that has child/ren
         (eq? (car n) 'car-is-pair)
         (display "|  ")
         (indent (cdr n)))
        (;generated by a nested list
         (eq? (car n) 'nested)
         (display "   ")
         (indent (cdr n)))
        (else
         (error "should not happen"))))

(define draw-list
  (lambda (car cdr pair? cons limit)
    (lambda (l)
      (define (draw-list l nodes-type level)
        "nodes-type is a list of symbols that has invariant at each moment
the type of open pairs in which the current list is placed. Its length
is the count of nested pairs up to the pair/symbol `l` that is being
processed. It is important to know the type of the pairs in which the
current pair/symbol lies, because we need to know where to draw the
current pair."
        (set! limit (- limit 1))
        (cond ((< limit 0)
               (display "limit exceeded")
               (newline))
              ( ;;TERMINUS -- not pair and not nil
               (not (or (pair? l) (null? l)))
               (display "--# ")
               (display l)
               (newline) )
              ( ;;VOID list -- ()
               (null? l)
               (display "--# ()")
               (newline))
              ( ;;CAR is pair and CDR is nil -- ((?))
               (and (null? (cdr l)) (pair? (car l)))
               (and (or (null? level)
                        (and (not (null? level))
                             (not (eq? (car level) 'cdr-pair))))
                    (display "`"))
               (display "--")
               (draw-list (car l) (append nodes-type '(nested)) (cons 'a level)))
              ( ;;CAR is a symbol and CDR is nil -- (S)
               (null? (cdr l))
               (and (or (null? level)
                        (and (not (null? level))
                             (not (eq? (car level) 'cdr-pair))))
                    (display "x"))
               (draw-list (car l) nodes-type (cons 'b level))
               (indent nodes-type)
               (newline))
              ( ;;CAR is pair and CDR is pair -- ((?) (?))
               (and (pair? (car l)) (pair? (cdr l)))
               (and (or (null? level)
                        (and (not (null? level))
                             (not (eq? (car level) 'cdr-pair))))
                    (display "o"))
               (display "--")
               (draw-list (car l) (append nodes-type '(car-is-pair)) (cons 'c level))
               (indent nodes-type)
               (display "&")
               (draw-list (cdr l) nodes-type (cons 'cdr-pair level)))
              ( ;;CAR is pair and CDR is symbol -- ((?) S)
               (pair? (car l))
               (display "!--")
               (draw-list (car l) (append nodes-type '(car-is-pair)) (cons 'e level))
               (indent nodes-type)
               (display "^")
               (draw-list (cdr l) nodes-type (cons 'f level)))
              ( ;;CAR is symbol; CDR is not a pair (S . S)
               (not (pair? (cdr l)))
               (and (or (null? level)
                        (and (not (null? level))
                             (not (eq? (car level) 'cdr-pair))))
                    (display "~"))
               (draw-list (car l) nodes-type (cons 'g level))
               (indent (append nodes-type '(car-not-pair)))
               (newline)
               (indent nodes-type)
               (display "$")
               (draw-list (cdr l) nodes-type (cons 'h level))
               )
              ( ;;CAR is symbol and CDR is a pair ( S . (?) )
               else
               (and (or (null? level)
                        (and (not (null? level))
                             (not (eq? (car level) 'cdr-pair))))
                    (display "@"))
               (draw-list (car l) nodes-type (cons 'cdr-pair level))
               (indent (append nodes-type '(car-not-pair)))
               (newline)
               (indent nodes-type)
               (display "'")
               (draw-list (cdr l) nodes-type (cons 'cdr-pair level)))))
      (draw-list l '() '()))))

(define (tree-view list)
  (display "Tree view for: ")
  (display list)
  (newline)
  (newline)
  ((draw-list car cdr pair? cons 10000) list)
  (newline))

(define (tree-view-with-selectors-and-limit list limit car cdr pair? cons)
  (display "Tree view for: ")
  (display list)
  (newline)
  (newline)
  ((draw-list car cdr pair? cons limit) list)
  (newline))

(define (tree-view-with-selectors list car cdr pair? cons)
  (display "Tree view for: ")
  (display list)
  (newline)
  (newline)
  ((draw-list car cdr pair? cons 10000) list)
  (newline))

(define (tree-view-with-limit list limit)
  (display "Tree view for: ")
  (display list)
  (newline)
  (newline)
  ((draw-list car cdr pair? cons limit) list)
  (newline))

(module+ test
  (tree-view '(1 (2) ((3 4) (()()) (5 6)) (())))
  (tree-view '(1 2 (3 4 7 ) 0 (5 6)))
  (tree-view '(f 1 2 3))
  (tree-view '(a))
  (tree-view '( 1 (2 4 (5 6 7 (8)) (9) 10) 3 ))
  (tree-view '((((((0 1))))) 2))
  (tree-view '(g ((((((((((0)1)2)3)4)5)6)7)8)9)0))
  (tree-view '(g ((((((((((0)1)2)3)((((((((((0)1)2)3)4)5)6)7)8)9)4)5)6)7)8)9)0))
  (tree-view (list (list 'true 'false) (list 3)))
  (tree-view (list 1 (list 2 (list 3 4))))
  (tree-view (list 1 (list 2 (cons 3 4)))))

(module+ export
  (provide tree-view-with-selectors
           tree-view-with-limit
           tree-view-with-selectors-and-limit
           tree-view))
