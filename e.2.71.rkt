#lang racket

(require (submod "e.2.67.rkt" export))
(require (submod "e.2.69.rkt" export))
(require (submod "e.2.24.rkt" export))

(define alphabet '((A 1)
                   (B 2)
                   (C 4)
                   (D 8)
                   (E 16)
                   (F 32)
                   (G 64)
                   (H 128)
                   (I 256)
                   (J 512)
                   (K 1024)
                   (L 2048)
                   (M 4096)
                   ))

(define (list-to-str l)
  (if (null? l)
      ""
      (format "~a~a"
              (list-to-str (cdr l))
              (car l))))

(define (filter-tree tree path)
  "we make an identical tree as the tree generated by
generate-huffman-tree, but keep only the symbols of its leaves, and
drop the other attributes on the nodes. We also add the code of each
symbol in the output."
  (cond ((leaf? tree)
         (format "~a [code: ~a]"
                 (symbol-leaf tree)
                 (list-to-str path)))
        (else (list (filter-tree (left-branch tree) (cons '0 path))
                    (filter-tree (right-branch tree) (cons '1 path ))))))

(module+ test
 ;; all the right branches have the length 1. All the symbols have the
 ;; code 00...0001, 0 repeated from 0 to n times.
 (tree-view
  (filter-tree
   (generate-huffman-tree alphabet)
   '())))

(module+ export
  (provide filter-tree))


