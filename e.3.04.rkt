#lang racket

(require (rename-in (submod "e.1.09.rkt" export)
                    (inc 1+)))

(define (make-account balance password)
  (let ((counter 0))
    (define (call-the-cops) "Call The cops")
    (define (withdraw amount)
      (set! counter 0)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))
    (define (deposit amount)
      (set! counter 0)
      (set! balance (+ balance amount))
      balance)
    (define (dispatch pass msg)
      (cond ((not (eq? pass password))
             (set! counter (1+ counter))
             (if (> counter 7)
                 (call-the-cops)
                 "Incorrect password"))
            ((eq? msg 'withdraw)
             withdraw)
            ((eq? msg 'how-many?)
             counter)
            ((eq? msg 'deposit)
             deposit)
            (else (error "Unknown request")) ) )
    dispatch) )

(module+ test
  (define acc (make-account 100 'pass))

  ((acc 'pass  'withdraw ) 40)
  (acc 'pass  'how-many?)
  ((acc 'pass  'withdraw ) 40)
  (acc 'pass  'how-many? )
  ((acc 'pass  'withdraw ) 40)
  (acc 'pass  'how-many? )
  (acc 'pass0  'how-many? )
  (acc 'pass0  'how-many? )
  (acc 'pass0  'how-many? )
  (acc 'pass0  'how-many? )
  (acc 'pass0  'how-many? )
  (acc 'pass0  'how-many? )
  (acc 'pass0  'how-many? )
  (acc 'pass0  'how-many? )
  (acc 'pass  'how-many? )
  ((acc 'pass  'withdraw ) 20)
  (acc 'pass  'how-many? )
  )


