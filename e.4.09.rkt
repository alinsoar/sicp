#lang racket

(require "sicp.rkt")
(GETMOD 4 1 without eval apply)

;;;SECTION 4.1.1
(define (eval exp env)
  '(d "//" exp)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((get-environment? exp) env)
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp) 
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((for? exp) (eval (for-expand exp) env))
        ((while? exp) (eval (while-expand exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))

(define (apply procedure arguments)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure procedure arguments))
        ((compound-procedure? procedure)
         (eval-sequence
          (procedure-body procedure)
          (extend-environment
           (procedure-parameters procedure)
           arguments
           (procedure-environment procedure))))
        (else
         (error
          "Unknown procedure type -- APPLY" procedure))))

(define (list-of-values-ORIG exps env)
  (if (no-operands? exps)
      '()
      (cons (eval (first-operand exps) env)
            (list-of-values (rest-operands exps) env))))
(define (list-of-values exps env)
  (if (no-operands? exps)
      '()
      (let ((leftmost-value (eval (first-operand exps) env)))
        (cons leftmost-value (list-of-values (rest-operands exps) env)))))
(define (eval-if exp env)
  (if (true? (eval (if-predicate exp) env))
      (eval (if-consequent exp) env)
      (eval (if-alternative exp) env)))
(define (eval-sequence exps env)
  (cond ((last-exp? exps) (eval (first-exp exps) env))
        (else (eval (first-exp exps) env)
              (eval-sequence (rest-exps exps) env))))
(define (eval-assignment exp env)
  (set-variable-value! (assignment-variable exp)
                       (eval (assignment-value exp) env)
                       env)
  'ok)
(define (eval-definition exp env)
  (define-variable! (definition-variable exp)
    (eval (definition-value exp) env)
    env)
  'ok)

(define (for?            exp) (tagged-list? exp 'for))
(define (for-range       exp) (cadr exp))
(define (for-name        exp) (car (for-range exp)))
(define (for-range-start exp) (cadr (for-range exp)))
(define (for-range-end   exp) (caddr (for-range exp)))
(define (for-range-step  exp) (cadddr (for-range exp)))
(define (for-body        exp) (cddr exp))

(define (for-expand exp)
  `(((lambda (loop)
       (loop loop))
     (lambda (loop)
       (lambda (,(for-name exp))
         (cond ,(cons `(<= ,(for-name exp) ,(for-range-end exp))
                      (for-body exp))
               (else
                ,(cons 'begin
                       (append (for-body exp)
                               `(((loop loop)
                                  (+ ,(for-name exp)
                                     ,(for-range-step exp)))))))))))
    ,(for-range-start exp)))

(define (while? exp) (tagged-list? exp 'while))
(define while-cond cadr)
(define while-body cddr)

(define (while-expand exp)
  `(((lambda (loop)
       (loop loop))
     (lambda (loop)
       (lambda ()
         (cond ((not ,(while-cond exp)) false)
               (else
                ,(cons 'begin (while-body exp))
                ((loop loop)))))))))

(module+ test
  (define (test-eval e) (eval e the-global-environment))
  (test-eval '(((lambda (length)
                  (length length))
                (lambda (length)
                  (lambda (l)
                    (cond ((null? l) 0)
                          (else (+ 1 ((length length)
                                      (cdr l))))))))
               '(1 2 3)))
  (test-eval '(((lambda (length)
                  (length length))
                (lambda (length)
                  ((lambda (length)
                     (lambda (l)
                       (cond ((null? l) 0)
                             (else (+ 1 (length (cdr l)))))))
                   (lambda (x) ((length length) x)))))
               '(1 2 3)))
  (test-eval '(((lambda (length)
                  (length length))
                (lambda (length0)
                  ((lambda (length)
                     (lambda (l)
                       (cond ((null? l) 0)
                             (else (+ 1 (length (cdr l)))))))
                   (lambda (x) ((length0 length0) x)))))
               '(1 2 3)))
  (test-eval '((lambda (f)
                 (((lambda (length)
                     (length length))
                   (lambda (length0)
                     (f
                      (lambda (x) ((length0 length0) x)))))
                  '(1 2 3)))
               (lambda (length)
                 (lambda (l)
                   (cond ((null? l) 0)
                         (else (+ 1 (length (cdr l)))))))))
  (test-eval '(begin (define p ((lambda (f)
                                  ((lambda (length)
                                     (length length))
                                   (lambda (length0)
                                     (f
                                      (lambda (x) ((length0 length0) x))))))
                                (lambda (length)
                                  (lambda (l)
                                    (cond ((null? l) 0)
                                          (else (+ 1 (length (cdr l)))))))))
                     (cons (car p) (cons (car (cdr p)) '(a b c d e)))))
  (test-eval '(p '(a b c d e f g h i j k l m n o p q r s t u v w x y z)))
  (test-eval '(((lambda (f)
                  ((lambda (rec) (rec rec))
                   (lambda (rec) (f (lambda (x) ((rec rec) x))))))
                (lambda (length)
                  (lambda (l)
                    (cond ((null? l) 0)
                          (else (+ 1 (length (cdr l))))))))
               '(1 2 3 4 5 6 7 8 9 0)))
  "-- FOR --"
  (test-eval '(begin
                (define x 0)
                (for (w 1 10 1)
                  (set! x (+ x w))
                  x)))
  (test-eval '(begin
                "this is factorial"
                (define x 1)
                (for (n 10 0 -1)         ; NAME START END STEP
                  (if (= n 0)
                      'ok
                      (set! x (* x n)))
                  x)))
  (test-eval '(begin
                "break before the loop to finish"
                (define x 1)
                (for (n 10 0 -1)
                  (if (= n 0)
                      'ok
                      (set! x (* x n)))
                  (set! n -10))
                x))
  
  "-- WHILE --"
  (test-eval '(begin
                (define x '(1 2 3 4))
                (define y x)
                (define z '())
                (while (not (eq? y '()))
                  (set! z (cons (car y) z))
                  (set! y (cdr y)))
                z))
  (test-eval '(begin
                "sum of N numbers"
                (define n 0)
                (define s 0)
                (while (< n 1001)
                  (set! s (+ s n))
                  (set! n (+ n 1)))
                s))
  (test-eval '(begin
                "sum of N numbers"
                (define n 1000)
                (define s 0)
                (while (< 0 n)
                  (set! s (+ s n))
                  (set! n (- n 1)))
                s))
  (test-eval '(begin
                (define s 0)
                (while false (set! s (+ s n)))
                s))
  (test-eval '(begin
                "sum of N numbers"
                (define n 3)
                (define s 0)
                (while (< 0 n)
                  (print-environment 'env)
                  (set! s (+ s n))
                  (set! n (- n 1)))
                s
                ))
  "---"
  (eval '((lambda ()
            (begin '(print-environment (quote env))
                   (+ 2 3))))
        the-global-environment)
  "---"
  (eval '((lambda () 10))
        the-global-environment)
  'done)

