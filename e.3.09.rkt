#lang racket

;;;                                         ;artist-mode: recursive call of factorial
;;;+----------------------------------------------------------------------------------+
;;;| factorial-rec                           GLOBAL ENVIRONMENT                       |
;;;|        |                                                                         |
;;;|        |                                                                         |
;;;+--------|-------------------------------------------------------------------------+
;;;         |   ^               ^               ^                               ^
;;;         |   |               |               |                               |
;;;         |   |               |               |                               |
;;;         |   |               |               |                               |
;;;         |   |               |               |                               |
;;;         |   |           +---+---+       +---+---+                       +---+---+
;;;         V   |           | n = 6 |       | n = 5 |                       | n = 1 |
;;;+--------+---+---+       +-------+       +-------+       6 calls         +-------+
;;;|   o    |   o   |     (factorial 6)   (factorial 5)    .........      (factorial 1)
;;;+---+----+-------+     => (* 6 (f 5))  => (* 5 (f 4))                  => 1
;;;    |                        |               |                               |
;;;    |                        |               |                               |
;;; o param: n                  |               |                               |
;;; o code:                     |               |                               |
;;;  (if (= n 1) ...)      <----+          <----+                          <----+
;;;

;; Recursive

(define (factorial-rec n)
  (if (= n 1)
      1
      (* n (factorial-rec (- n 1)))))

;;;
;;;                                         ;artist-mode: iterative call of factorial
;;;+----------------------------------------------------------------------------------+
;;;| factorial-iter   fact-iter              GLOBAL ENVIRONMENT                       |
;;;|  |                |                                                              |
;;;|  |                |                                                              |
;;;+--|----------------|--------------------------------------------------------------+
;;;   |         ^      |   ^          ^          ^                           ^
;;;   |         |      |   |          |          |                           |
;;;   |         |      |   |          |          |                           |
;;;   +-----+   |      |   |          |          |                           |
;;;         |   |      |   |          |          |                           |
;;;         |   |      |   |      +---+---+      |                           |
;;;         V   |      |   |      | n = 6 |      |                           |
;;;+--------+---+---+  |   |      +-------+      |                           |
;;;|  o     |   o   |  |   |    (factorial 6)    |                           |
;;;+--+-----+-------+  |   |   => (fact-iter...) |                           |
;;;   |                |   |          |          |                           |
;;;   V                |   |          |    +-----------+               +-----------+
;;;o param: n          |   |          |    |product:1  |    7 calls    |product:PR.|
;;;o code:             |   |          |    |counter:1  |  ...........  |counter:7  |
;;; (fact-iter 1 1 n)  |   |     <----+    |max-count:6|               |max-count:6|
;;;                    |   |               +-----------+               +-----------+
;;;                    V   |             (fact-iter 1 1 6)           (fact-iter PRODUCT 7 6)
;;;           +--------+---+---+         =>(f-i (* co pr)...)        => PRODUCT
;;;           |   o    |   o   |                 |                           |
;;;           +---+----+-------+                 |                           |
;;;               |                              |                           |
;;;               V                              |                           |
;;;            o param: pro cou max              |                           |
;;;            o code:                    <------+                    <------+
;;;             (if (= n 1) ...
;;;                 (fact-iter ...) )
;;;

;; Iterative
(define (factorial-iter n)
  (fact-iter 1 1 n))

(define (fact-iter product counter max-count)
  (if (> counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))


;;;                                                    ;artist-mode: iterative recursive call of factorial
;;; +-----------------------------------------------------------------------------------------------------+
;;; |   factorial-co                                                                  GLOBAL ENVIRONMENT  |
;;; |           |                                                                                         |
;;; |           |                                                                                         |
;;; +-----------+-----------------------------------------------------------------------------------------+
;;;             |  ^                ^
;;;             |  |                |              NOTE: I did not represent on figure the return applications of CO.
;;;             V  |                |              Each application of CO creates an environment in which X is bound
;;;      +------+--+---+            |
;;;      |      |  o   |            |   +----+---+<-----------+<----------------------+<-----------------------+<----------------------+
;;;      +---+--+--+---+            |   |    ^   ^            ^                       ^                        ^                       ^
;;;          |                      |   |    |   |            |                       |                        |                       |
;;;          |                      |   v    |   |            |                       |                        |                       |
;;;         /                  +----+----+   |   |            |                       |                        |                       |
;;;        o param: n          | n:3     |   |   |            |                       |                        |                       |
;;;        o code:             | iter: ----+ |   |            |    +---------+        |                        |                       |
;;;        (lambda (n)...)     +---------+ | |   |            |    |         |        |                        |                       |
;;;                            (fact-co 3) | |   |            |    V         |        |                        |                       |
;;;                                        | |   |     +------+------+       |        |                        |                       |
;;;                         +--------------+ |   |     | m:3         |       |        |                        |                       |
;;;                         |   +------------+   |     | co:  ---------+     |        |   +-----------+        |                       |        => (co 6)
;;;                         |   |                |     +-------------+ |     |        |   |           |        |                       |
;;;                         |   |                |      (iter 3 ...)   |     |        |   v           |        |                       |
;;;                         V   |                |            +--------+     | +------+------+        |        |                       |
;;;                  +------+---+--+             |            |              | | m:2         |        |        |                       |
;;;                  |   o  |   o  |             +------------+---+          | | co:  ---------+      |        |   +----------+        |         => (co 2)
;;;                  +---+--+------+                          |   |          | +-------------+ |      |        |   |          |        |
;;;                      |                                    v   |          |  (iter 2 ...)   |      |        |   v          |        |
;;;                     /                              +------+---+--+       |        +--------+      | +------+------+       |        |
;;;                    o param: m co                   |   o  |   o  |       |        |               | | m:1         |       |        |
;;;                    o code:                         +---+--+------+       +--------+---+           | | co:  ---------+     |        |         => (co 1)
;;;                    (lambda (m co)                      |                          |   |           | +-------------+ |     |        |
;;;                      (if (= m 0)                      /                           v   |           |  (iter 1 ...)   |     |        |
;;;                          ...))                       o param: m co         +------+---+--+        |        +--------+     | +------+------+
;;;                                                      o code:               |   o  |   o  |        |        |              | | m:0         |  => (co 1)
;;;                                                      (lambda (x) x)        +---+--+------+        +--------+---+          | | co:  ---------+
;;;                                                                                |                           |   |          | +-------------+ |
;;;                                                                               /                            |   |          |  (iter 0 ...)   |
;;;                                                                              o param: m co          +------+---+--+       |        +--------+
;;;                                                                              o code:                |   o  |   o  |       |        v
;;;                                                                              (lambda (x)            +---+--+------+       +--------+---+
;;;                                                                                (co (* m x)))            |                          |   |
;;;                                                                                                        /                           |   |
;;;                                                                                                       o param: m co         +------+---+--+
;;;                                                                                                       o code:               |   o  |   o  |
;;;                                                                                                       (lambda (x)           +---+--+------+
;;;                                                                                                         (co (* m x)))           |
;;;                                                                                                                                /
;;;                                                                                                                               o param: m co
;;;                                                                                                                               o code:
;;;                                                                                                                               (lambda (x)
;;;                                                                                                                                   (co (* m x)))
;;;

(define factorial-co
  (lambda (n)
    (define (iter m co)
      (if (= m 0)
          (co 1)
          (iter (- m 1)
                (lambda (x)
                  (co (* m x))))))
    (iter n (lambda (x) x))))


(module+ test

  "---"
  (factorial-rec 6)
  (factorial-iter 6)
  (factorial-co 3)
  )
